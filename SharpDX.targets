<!--
This Target file must be imported in a project using SharpDX
It adds automatically references to SharpDX assemblies for 
Toolkit based on the current .NET framework (select net20, net40 or winrt)
It compiles all files of type TookitFxc
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--Add ToolkitFxc as a new Build Action accessible on each File Properties-->
  <ItemGroup>
    <AvailableItemName Include="ToolkitFxc"></AvailableItemName>
  </ItemGroup>

  <PropertyGroup>
    <!--Detect SharpDX Platform based on .NETFramework version-->
    <SharpDXPlatform Condition="'$(SharpDXPlatform)' == '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and ('$(TargetFrameworkVersion)' == 'v2.0' or '$(TargetFrameworkVersion)' == 'v3.5') ">Standard-net20</SharpDXPlatform>
    <SharpDXPlatform Condition="'$(SharpDXPlatform)' == '' and '$(TargetFrameworkIdentifier)' == '.NETFramework' and ('$(TargetFrameworkVersion)' == 'v4.0' or '$(TargetFrameworkVersion)' == 'v4.5') ">Standard-net40</SharpDXPlatform>
    <SharpDXPlatform Condition="'$(SharpDXPlatform)' == '' and '$(TargetFrameworkIdentifier)' == '.NETCore'">Standard-winrt</SharpDXPlatform>
    <SharpDXPlatform Condition="'$(SharpDXPlatform)' == '' and '$(TargetFrameworkIdentifier)' == 'WindowsPhone' and '$(TargetFrameworkVersion)' == 'v8.0'">Standard-wp8-$(Platform)</SharpDXPlatform>

    <SharpDXIsPlatformDesktop Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">true</SharpDXIsPlatformDesktop>
    
    <!--Root SharpDX SDK Directory where assemblies are stored-->
    <SharpDXSdkDir Condition="'$(SharpDXSdkDir)' == ''">$(MSBuildThisFileDirectory)</SharpDXSdkDir>

    <!--SharpDX Directory to link against - based on platform-->
    <SharpDXSdkBinDir Condition="'$(SharpDXSdkBinDir)' == ''">$(SharpDXSdkDir)\Bin\$(SharpDXPlatform)</SharpDXSdkBinDir>
    
    <!--SharpDX Directory used for compiling - Default to Standard-net40-->
    <SharpDXSdkToolsDir Condition="'$(SharpDXSdkToolsDir)' == ''">$(SharpDXSdkDir)\Bin\Win8Desktop-net40</SharpDXSdkToolsDir>
  </PropertyGroup>

  <!-- Automatically adds references to SharpDX assemblies for toolkit -->
  <ItemGroup>
    <Reference Include="SharpDX">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.dll</HintPath>
    </Reference>
    <Reference Include="SharpDX.Toolkit">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.Toolkit.dll</HintPath>
    </Reference>
    <Reference Include="SharpDX.Toolkit.Compiler">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.Toolkit.Compiler.dll</HintPath>
    </Reference>
    <Reference Include="SharpDX.Toolkit.Game">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.Toolkit.Game.dll</HintPath>
    </Reference>
    <Reference Include="SharpDX.Toolkit.Graphics">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.Toolkit.Graphics.dll</HintPath>
    </Reference>
    <Reference Include="SharpDX.Toolkit.Input">
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.Toolkit.Input.dll</HintPath>
    </Reference>
    <Reference Include="SharpDX.D3DCompiler">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.D3DCompiler.dll</HintPath>
    </Reference>
    <Reference Include="SharpDX.Direct3D11">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.Direct3D11.dll</HintPath>
    </Reference>
    <Reference Include="SharpDX.DXGI">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.DXGI.dll</HintPath>
    </Reference>
  </ItemGroup>

  <!-- If we are on desktop, we can safely add a reference to Direct2D1 -->
  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
    <Reference Include="SharpDX.Direct2D1">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(SharpDXSdkBinDir)\SharpDX.Direct2D1.dll</HintPath>
    </Reference>
  </ItemGroup>

  <!--
    From C:\Program Files (x86)\MSBuild\Microsoft\XNA Game Studio\v4.0\Microsoft.Xna.GameStudio.Common.targets
    In VS 2008, a new feature was introduced to speed up the "F5" scenario when
    no changes have occurred. It does this by skipping the build entirely if the
    IDE believes there are no changes. This is fast, but unreliable because it
    does not check all the same files as msbuild does. In XNA game projects, for
    example, the IDE does not check if any content needs to be rebuilt. As a
    result, F5 is way faster, but you may start debugging a project that is out
    of date. To disable the new feature, we set DisableFastUpToDateCheck to true.
  -->
  <!--<PropertyGroup>
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
  </PropertyGroup>-->

  <PropertyGroup>
    <BuildDependsOn>
      BuildTkfx;
      $(BuildDependsOn);
    </BuildDependsOn>

    <ToolkitFxcDebugOption>true</ToolkitFxcDebugOption>
    <ToolkitFxcDebugOption Condition="$(Optimize) == 'true'">false</ToolkitFxcDebugOption>
  </PropertyGroup>

  <UsingTask TaskName="SharpDX.Toolkit.Graphics.EffectCompilerTask" AssemblyFile="$(SharpDXSdkToolsDir)\SharpDX.Toolkit.CompilerTask.dll"/>

  <Target Name="BuildTkfx">
    <EffectCompilerTask 
        ProjectDirectory="$(ProjectDir)" 
        OutputDirectory="$(OutDir)" 
        Debug="$(ToolkitFxcDebugOption)" 
        Files="@(ToolkitFxc)" 
        RootNamespace="$(RootNamespace)"
        IntermediateDirectory="$(IntermediateOutputPath)">
          <Output TaskParameter="OutputFiles" ItemName="FileWrites"/>
    </EffectCompilerTask>
  </Target>
</Project>