<!--
// Copyright (c) 2010-2012 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
-->
<!-- Nant Build file for SharpDX -->
<project name="SharpDX Build" default="help">
  <include buildfile="NantExtensions.include"/>

  <property name="project.name" value="SharpDX"/>
  <property name="project.sname" value="sharpdx"/>

  <property name="build_normal" value="false"/>
  <property name="build_signed" value="false"/>
  <property name="build_win8" value="false"/>
  <property name="build_dx11_1" value="false"/>

  <property name="keeppdb" value="false"/>
  <property name="keepexe" value="false"/>
  <property name="cleandir" value="./"/>
  <property name="build-date" value=""/>
  <property name="nightly-builds" value="false"/>
  <property name="publish-labels" value="Type-Archive,Featured"/>
  <property name="publish-project-name" value="sharpdx"/>
  <property name="publish-summary" value=""/>
  <property name="publish" value="false"/>

  <!-- Load NantGoogleTask  -->
  <loadtasks assembly="External\NantGoogleCode\NantGoogleCode.dll" />

  <!-- Prints the version -->
  <target name="setup" descriptio="Loads the version for the project">
    <!-- Load version from source code SharedAssemblyInfo.cs -->
    <loadfile file="Source/SharedAssemblyInfo.cs" property="assembly_version_file" />

    <property name="version-dir" value="Standard-net20" if="${build_normal}"/>
    <property name="version-dir" value="Signed-net20" if="${build_signed}"/>
    <property name="version-dir" value="Win8Metro" if="${build_win8}"/>
    <property name="version-dir" value="Win8Desktop-net20" if="${build_dx11_1}"/>

    <regex pattern="AssemblyVersion\(.(?'assembly_version'\d+\.\d+.\d+)" input="${assembly_version_file}" />
    <property name="output_bin_zip" value="${project.name}-Bin-${assembly_version}${build-date}.7z"/>
    <property name="output_bin_and_samples_zip" value="${project.name}-Full-${assembly_version}${build-date}.7z"/>

    <!-- Setup configuration -->
    <property name="configuration" value="Release" if="${build_normal}"/>
    <property name="configuration" value="Win8Release" if="${build_win8}"/>
    <property name="configuration" value="DIRECTX11_1Release" if="${build_dx11_1}"/>

    <echo message="${project.name} version from file is ${assembly_version}"/>
  </target>

  <!-- Clean all directories -->
  <target name="clean" description="Delete all previously compiled binaries.">
    <delete>
      <fileset basedir="${cleandir}">
        <include name="**/Bin/*.exe" unless="${keepexe}"/>
        <include name="**/Bin/*.dll" unless="${keepexe}"/>
        <include name="**/Bin/*.pdb" unless="${keeppdb}"/>
        <include name="**/Bin/x86/*.*" />
        <include name="**/Bin/x64/*.*" />
        <include name="**/Bin/*.lib" />
        <include name="**/Bin/*.exp" />
        <include name="**/Bin/*.check" />
        <include name="**/Debug/**" />
        <include name="**/Release/**" />
        <include name="**/Win8Debug/**" />
        <include name="**/Win8Release/**" />
        <include name="**/obj/**" />
        <include name="**/Generated/**" />
        <include name="**/*.suo" />
        <include name="**/*.bak" />
        <include name="**/*.user" />
        <include name="**/_ReSharper.*/**" />
        <exclude name="**/Build/**" />
        <exclude name="**/External/**" />
        <exclude name="**/.git/**" />
      </fileset>
    </delete>
    <!--Reset property cleandir -->
    <property name="cleandir" value="./"/>
  </target>

  <!-- Pusblish task. Upload zip files to googlecode -->
  <target name="publish" description="Set publish code">
    <property name="publish" value="true"/>
    <call target="git-sync"/>
  </target>

  <target name="publish-code" description="Publish to google code">
    <loadfile file="googlecode_password.txt" property="googlecode_password" />

    <if test="${file::exists(output_bin_zip)}">
      <gcupload labels="Type-Archive" username="alx.xoofx@gmail.com" password="${googlecode_password}" projectname="${publish-project-name}" filename="${output_bin_zip}" targetfilename="${output_bin_zip}" summary="${publish-summary}"/>
    </if>

    <if test="${file::exists(output_bin_and_samples_zip)}">
      <gcupload labels="Type-Archive" username="alx.xoofx@gmail.com" password="${googlecode_password}" projectname="${publish-project-name}" filename="${output_bin_and_samples_zip}" targetfilename="${output_bin_and_samples_zip}" summary="${publish-summary}"/>
    </if>
  </target>

  <!-- Git-Sync task. -->
  <target name="git-sync" description="Synchronize with git">
    <call target="setup"/>
    
    <!-- Rebase from Git -->
    <exec program="git.exe">
      <arg value="pull" />
      <arg value="--rebase" />
      <arg value="origin" />
    </exec>

    <if test="${publish}">
      <!-- Setup last tags-->
      <property name="publish-last-tag" value="last_stable"/>
      <!-- Use Special tag for nightly-builds -->
      <if test="${nightly-builds}">
        <property name="publish-last-tag" value="last_nightly_build"/>
      </if>

      <!-- Rebase from Git -->
      <exec program="git.exe" output="git-last-commit.txt">
        <arg value="log" />
        <arg value="-1" />
        <arg value="--format=&quot;%H %s&quot;" />
      </exec>
      <loadfile file="git-last-commit.txt" property="git-last-commit" />
      <delete file="git-last-commit.txt"/>
      
      <exec program="git.exe">
        <arg value="tag" />
        <arg value="${assembly_version}" />
      </exec>

	  <!-- This is asking for user/password WTF?!
      <exec program="git.exe">
        <arg value="push" />
        <arg value="origin" />
        <arg value="tag" />
        <arg value="${assembly_version}" />
      </exec>
	  -->

      <property name="publish-summary" value="Last commit -> ${git-last-commit}"/>
    </if>
  </target>

  <!-- Full clean and build -->
  <target name="help" description="Prints help about this build." >
    <echo message="Usage MakeSharpDX.cmd target"/>
    <echo message=""/>
    <echo message="Target to prepare publish  before full, nightly-builds:"/>
    <echo message="     publish = Prepare build for publish"/>
    <echo message=""/>
    <echo message="Target to call before build/zip:"/>
    <echo message="      normal = Prepare for normal build (Framework .NET 2.0+)"/>
    <echo message="      signed = Prepare for signed build (Framework .NET 2.0+)"/>
    <echo message="        win8 = Prepare for DirectX11.1 Win8 Metro build (Framework .NET 4.5Core)"/>
    <echo message="      dx11_1 = Prepare for DirectX11.1 desktop build (Framework .NET 2.0+)"/>
    <echo message=""/>
    <echo message="       clean = Full cleanup"/>
    <echo message="       build = Build Standard Assemblies"/>
    <echo message="         doc = Generates documentation (Run 'build' target before this)"/>
    <echo message="         zip = Zip assemblies and samplles (Run 'build' target before this)"/>
    <echo message="       nuget = Build Nuget Packages (Run 'build' target before this)"/>
    <echo message="  nuget-push = Publish Nuget packages (Run 'nuget' target before this)"/>
    <echo message=""/>
    <echo message="        full = Run build+doc+zip for all targets (normal, signed, win8, dx11_1)"/>
    <echo message=""/>
    <echo message="Example:"/>
    <echo message="- Build Win8 build only = MakeSharpDX.cmd win8 build"/>
    <echo message="- Build Full build only = MakeSharpDX.cmd full"/>
    <echo message="- Build Nightly-builds Full build and publish = MakeSharpDX.cmd publish nightly-builds full"/>
  </target>

  <!-- Full clean and build -->
  <target name="full" description="Full build targets.">
    <call target="signed"/>
    <call target="build"/>

    <call target="win8"/>
    <call target="build"/>

    <call target="dx11_1"/>
    <call target="build"/>

    <call target="normal"/>
    <call target="build"/>

    <call target="nuget"/>

    <call target="doc"/>

    <call target="zip"/>

    <call target="publish-code" if="${publish}"/>
  </target>

  <!-- Internal task to patch all samples and convert csproj -->
  <target name="patch-samples" description="Patch Samples Files">
    <foreach item="File" property="csproj-path">
      <in>
        <items>
          <include name="Samples/**/*.sample.csproj" />
        </items>
      </in>
      <do>
        <property name="csproj-path-dest" value="${path::combine(path::get-directory-name(csproj-path),path::get-file-name-without-extension(path::get-file-name-without-extension(csproj-path)))}.csproj"/>
        <property name="csproj-str" value="${file::read(csproj-path)}"/>
        <property name="csproj-win8" value="${string::contains(csproj-path-dest,'Win8')}"/>
        <if test="${csproj-win8}">
          <echo message="Create file on  ${csproj-path-dest} ${file::write(csproj-path-dest, regex::replace(csproj-str, '\\Source\\.*?Configuration\)', '\Bin\Win8Metro')) }"/>
        </if>
      </do>
    </foreach>
  </target>

  <!-- Full clean and build -->
  <target name="nightly-builds" description="Full nighly-builds targets.">
    <property name="nightly-builds" value="true"/>
    <property name="publish-project-name" value="sharpdx-nightly-builds"/>
    <property name="publish-labels" value="Type-Archive"/>
    <property name="build-date" value="_${string::pad-left(datetime::get-year(datetime::now()),4,0)}${string::pad-left(datetime::get-month(datetime::now()),2,0)}${string::pad-left(datetime::get-day(datetime::now()),2,0)}"/>
  </target>

  <!-- Normal build -->
  <target name="normal" description="Build Win8 targets.">
    <property name="build_normal" value="true"/>
    <property name="build_signed" value="false"/>
    <property name="build_win8" value="false"/>
    <property name="build_dx11_1" value="false"/>
  </target>

  <!-- Win8 build -->
  <target name="win8" description="Build Win8 targets.">
    <property name="build_normal" value="false"/>
    <property name="build_signed" value="false"/>
    <property name="build_win8" value="true"/>
    <property name="build_dx11_1" value="false"/>
  </target>

  <!-- Normal Signed build -->
  <target name="signed" description="Build Signed targets.">
    <property name="build_normal" value="true"/>
    <property name="build_signed" value="true"/>
    <property name="build_win8" value="false"/>
    <property name="build_dx11_1" value="false"/>
  </target>

  <!-- Direct3D11.1 build -->
  <target name="dx11_1" description="Build d3d11.1 targets.">
    <property name="build_normal" value="false"/>
    <property name="build_signed" value="false"/>
    <property name="build_win8" value="false"/>
    <property name="build_dx11_1" value="true"/>
  </target>

  <!-- Nuget Package build -->
  <target name="nuget" description="Build NuGet Packages">
    <!-- Setup based on config -->
    <call target="setup"/>
    <delete dir="Packages"/>
    <mkdir dir="Packages"/>
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="**/*.nuspec" />
          <exclude name="**/SharpDX.Animation.nuspec" />
        </items>
      </in>
      <do>
        <echo message="Nuget on ${path::get-directory-name(filename)}"/>
        <exec program="nuget.exe" workingdir="${path::get-directory-name(filename)}">
          <arg value="pack" />
          <arg value="-Symbols" />
          <!-- <arg value="-Verbose" /> -->
          <arg value="-OutputDirectory" />
          <arg value="${project::get-base-directory()}\Packages" />
          <arg value="-Properties" />
          <arg value="version=${assembly_version}" />
          <arg value="${filename}" />
        </exec>
      </do>
    </foreach>
  </target>

  <!-- Nuget-Publish -->
  <target name="nuget-push" description="Publish NuGet Packages">
    <!-- Setup based on config -->
    <call target="setup"/>
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="Packages/*.nupkg" />
        </items>
      </in>
      <do>
        <echo message="Nuget push  ${filename}"/>
        <exec program="nuget.exe" failonerror="false">
          <arg value="push" />
          <arg value="${filename}" />
        </exec>
      </do>
    </foreach>
  </target>

  <!-- Main build task -->
  <target name="build" description="Build all targets.">
    <!-- Setup based on config -->
    <call target="setup"/>

    <!-- Clean all directories -->
    <property name="keeppdb" value="false"/>
    <property name="keepexe" value="false"/>
    <call target="clean"/>

    <!-- Copy doc to SharpGen directory -->
    <mkdir dir="Source/Tools/SharpGen/Bin/Release"/>
    <copy todir="Source/Tools/SharpGen/Bin/Release">
      <fileset basedir="Source/Tools/SharpGen/Doc/">
        <include name="*.*" />
      </fileset>
    </copy>

    <!-- Setup MSBuild -->
    <exec program="msbuild.exe" >
      <arg value="/t:Build"/>
      <arg value="/p:Configuration=${configuration}"/>
      <arg value='/p:Platform="Any CPU"'/>
      <arg value='/p:SharpDXSign=${build_signed}'/>
      <arg value="${project.name}.sln" />
    </exec>

    <!-- Create Bin Output Directory -->
    <delete dir="Bin/${version-dir}"/>
    <mkdir dir="Bin/${version-dir}"/>

    <copy flatten="true" todir="Bin/${version-dir}">
      <fileset basedir="Source/">
        <include name="SharpDX.*/Bin/${configuration}/*.dll" />
        <include name="SharpDX.*/Bin/${configuration}/*.pdb" />
        <include name="SharpDX.*/Bin/${configuration}/*.xml" />
      </fileset>
    </copy>

  </target>

  <!-- Documentation  -->
  <target name="doc" description="Generates documentation">
    <!-- Setup based on config -->
    <call target="setup"/>

    <!-- Create Bin Output Directory -->
    <delete dir="Build/Documentation"/>

    <exec program="Source/Tools/SharpDoc/Bin/Release/sharpdoc.exe" workingdir="Documentation">
      <arg value="--config=config.xml"/>
      <arg value="--output=..\Build\Documentation"/>
    </exec>
  </target>  

  <!-- Main zip task -->
  <target name="zip" description="Build all targets.">
    <!-- Setup based on config -->
    <call target="setup"/>

    <property name="cleandir" value="Samples"/>
    <call target="clean"/>

    <!-- Create Samples Output Directory -->
    <delete dir="Build/Samples"/>

    <copy todir="Build/">
      <fileset>
        <include name="Bin/**/*.dll"/>
        <include name="Bin/**/*.xml"/>
        <include name="Samples/**"/>
        <include name="*.txt"/>
        <exclude name="Samples/Win8/Win8Demos.sln"/>
        <exclude name="**/*.sample.csproj"/>
        <exclude name="googlecode_password.txt"/>
      </fileset>
    </copy>

    <delete dir="${output_bin_zip}"/>
    <exec program="External/7-Zip/7z.exe" workingdir="Build">
      <arg value="a"/>
      <arg value="-r"/>
      <arg value="..\${output_bin_zip}"/>
      <arg value="Bin\*.*"/>
      <arg value="ChangeLog.txt"/>
      <arg value="License.txt"/>
      <arg value="ReleaseNotes.txt"/>
    </exec>

    <delete dir="${output_bin_and_samples_zip}"/>
    <exec program="External/7-Zip/7z.exe" workingdir="Build">
      <arg value="a"/>
      <arg value="-r"/>
      <arg value="..\${output_bin_and_samples_zip}"/>
      <arg value="*.*"/>
    </exec>
  </target>

</project>