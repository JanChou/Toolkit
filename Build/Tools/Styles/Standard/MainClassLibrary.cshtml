@*
// Copyright (c) 2010-2011 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this to modify the sequence of the generated file for this template
// -------------------------------------------------------------------------------
*@
@using SharpDoc.Model
@using System.Text;
@using SharpCore.Logging;
@model SharpDoc.TemplateContext
@{    
    // Write Class Library        
    foreach (var assembly in Model.Assemblies)
    {
        Model.Topic = assembly.TopicLink;
        Model.Assembly = assembly;
        Model.Namespace = null;
        Model.Type = null;
       
        Logger.Message("Generate documentation for assembly [{0}]", assembly.Name);

        Model.WriteToFile("html\\" + assembly.NormalizedId + Param.FileExt, Parse("Assembly"));
        
        foreach (var @namespace in assembly.Namespaces)
        {
            Model.Topic = @namespace.TopicLink;
            Model.Namespace = @namespace;
            Model.Type = null;

            Model.WriteToFile("html\\" + @namespace.NormalizedId + Param.FileExt, Parse("Namespace"));

            foreach (var type in @namespace.Types)
            {
                Model.Topic = type.TopicLink;
                Model.Type = type;
                Model.WriteToFile("html\\" + @type.NormalizedId + Param.FileExt, Parse("Type"));

                foreach (var member in type.Members)
                {
                    Model.Member = member;
                    Model.WriteToFile("html\\" + @member.NormalizedId + Param.FileExt, Parse("Member"));
                }
                Model.Member = null;
                Model.Type = null;
            }
        }
    }
    // Reset current topic to null
    Model.Topic = null;        
}
