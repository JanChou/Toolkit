@*
// Copyright (c) 2010-2011 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the body inside an html page
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using SharpDoc.Model
@using System.Text
@functions {
    public void DisplayTopic(StringBuilder toc, NTopic topic, string classLevel, bool isHighlight = false) {
        // Don't list the search topic unless its selected
        if (topic.IsSearchResult && Model.Topic.Id != topic.Id)
            return;
        toc.AppendFormat("<div class='{0}'><div class='icon'></div><a href='{1}{2}'{3}>{4}</a><div style='clear: both'></div></div>",
            classLevel,
            topic.NormalizedId,
            Param.FileExt,
            isHighlight?" class='highlight'":"",
            topic.Name).AppendLine();
    }

    public string DumpToc() {
        var toc = new StringBuilder();
        var topicHasChildrens = Model.Topic.SubTopics.Count > 0;
        var topics = Model.Topic.GetParents();
        var i = 0;
        for(; i < topics.Count; i++)  {
            var topic = topics[i];
            string divClass = (i>0)?"toc up":"toc top";
            if ((i+1) == topics.Count && !topicHasChildrens) 
            {            
                divClass = "toc child level0";
            }
            DisplayTopic(toc, topic, divClass);
        }
        if (topicHasChildrens) {
            string topicClassLevel = (i==0)?"toc top":"toc child level0";
            string subTopicClassLevel = (i==0)?"toc child level0":"toc child level1";
            
            DisplayTopic(toc, Model.Topic, topicClassLevel, true);
            foreach(var topic in Model.Topic.SubTopics) {
                DisplayTopic(toc, topic, subTopicClassLevel);
            }
        }
        else
        {
            if (i == 0 && Model.Topic.Parent == null) {
                DisplayTopic(toc, Model.Topic, "toc top", true);                
            } else {
                foreach (var topic in Model.Topic.Parent.SubTopics)
                    DisplayTopic(toc, topic, "toc child level1", topic.Id == Model.Topic.Id);
            }
        }
        return toc.ToString();        
    }
}

@helper Dump()
{   
    @Include("SearchBox")
    @DumpToc()
}