@*
// Copyright (c) 2010-2011 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the generated html body for a Type
// -------------------------------------------------------------------------------
*@
@using SharpDoc.Model
@using System.Text;
@model SharpDoc.TemplateContext
@Import("Section")
@{    
    // Initialize complex inheritance flag 
    // Check if this type has a complex inheritance   
    HasComplexInheritance = (Model.Type.FlattenedHierarchy.Count - Model.Type.Bases.Count) > 4;
}
@functions {

    /// <summary>
    /// Value indicating if the current type has a complex inheritance
    /// </summary>
    public bool HasComplexInheritance {get;set;}

    /// <summary>
    /// Write inheritance hierarchy.
    /// </summary>
    /// <param name="full">true to write the full inheritance, false to stop just after the self type</param>
    /// <returns></returns>
    protected object WriteInheritance(bool full) {
        var builder = new StringBuilder();
        const string levelText = "&nbsp;&nbsp;&nbsp;";
        int lastLevel = 0;
        for(int i = 0; i < (full?Model.Type.FlattenedHierarchy.Count:Model.Type.Bases.Count+1); i++) {
            var item = Model.Type.FlattenedHierarchy[i];
            lastLevel = item.Item1;
            builder.Append(string.Concat(Enumerable.Repeat(levelText, lastLevel)));
            if (item.Item2.Id == Model.Type.Id)
            {
                builder.Append(Escape(item.Item2.FullName) + "<br />");
            }
            else
            {
                builder.Append(ToUrl(item.Item2, item.Item2.FullName) + "<br />");
            }
        }
        if (HasComplexInheritance && !full) {
            builder.Append(string.Concat(Enumerable.Repeat(levelText, lastLevel)));
            builder.Append(@"<a href=""#section_full_inheritance"">More...</a><br/>");
        }
        return builder;
    }
}

@helper DumpInheritance(bool full) 
{
    @WriteInheritance(full)
}
@{
    var self = Model.Type;
}
<h1 id="#top" class="content-title">@self.Name @self.TypeName</h1>
        
<div class="summary"><p>@TagExpand(self.Description)</p></div>

@if (self is NClass)
    @Helpers.Section.Dump("section_partial_inheritance", "Inheritance Hierarchy", DumpInheritance(!HasComplexInheritance).ToString())   
<p></p>
<strong>Assembly: </strong>@ToUrl(Model.Assembly) (@Model.Assembly.FileName @Model.Assembly.Version)<br />
<strong>Namespace: </strong>@ToUrl(Model.Namespace)<br />

@if (self is NType)
    @Helpers.Section.DumpSyntax(self)   
         
@Include("TypeBodyMembersHeader")

<div class="members">
@if (self.HasConstructors)
    @Helpers.Section.Dump("Constructors", self.Constructors, true)

@if (self.HasFields)
    @Helpers.Section.Dump("Fields", self.Fields, true)

@if (self.HasProperties)
    @Helpers.Section.Dump("Properties", self.Properties, true)

@if (self.HasMethods)
    @Helpers.Section.Dump("Methods", self.Methods, true)
        
@if (self.HasOperators)
    @Helpers.Section.Dump("Operators", self.Operators, true)

@if (self.HasEvents)
    @Helpers.Section.Dump("Events", self.Events, true)

@if (!string.IsNullOrEmpty(self.Remarks)) 
    @Helpers.Section.Dump("Remarks", TagExpand(self.Remarks))

@if (self is NClass && HasComplexInheritance)
    @Helpers.Section.Dump("section_full_inheritance", "Inheritance Hierarchy", DumpInheritance(true).ToString())   
</div>
<!-- Temporary space -->
<br />
<br />
<br />
